# Fleet Tracker Production Environment
# Docker Compose configuration for production deployment

version: '3.8'

services:
  # PostgreSQL Database with PostGIS
  database:
    image: postgis/postgis:15-master
    container_name: fleet_tracker_db_prod
    environment:
      POSTGRES_DB: ${DB_NAME:-fleet_tracker}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - fleet_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: fleet_tracker_redis_prod
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    networks:
      - fleet_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # MQTT Broker
  mosquitto:
    image: eclipse-mosquitto:2
    container_name: fleet_tracker_mqtt_prod
    ports:
      - "1883:1883"
      - "8883:8883"
    volumes:
      - ./mqtt-broker/mosquitto.prod.conf:/mosquitto/config/mosquitto.conf:ro
      - ./mqtt-broker/ssl:/mosquitto/ssl:ro
      - mosquitto_data:/mosquitto/data
    networks:
      - fleet_network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: fleet_tracker_backend_prod
    environment:
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@database:5432/${DB_NAME:-fleet_tracker}
      - REDIS_URL=redis://redis:6379
      - MQTT_BROKER_HOST=mosquitto
      - MQTT_BROKER_PORT=1883
      - ENVIRONMENT=production
      - DEBUG=false
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_SERVICE_ACCOUNT_KEY=${FIREBASE_SERVICE_ACCOUNT_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
    depends_on:
      - database
      - redis
      - mosquitto
    networks:
      - fleet_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
      replicas: 2

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: fleet_tracker_frontend_prod
    environment:
      - REACT_APP_API_URL=${API_URL:-https://api.fleettracker.com}
      - REACT_APP_WS_URL=${WS_URL:-wss://api.fleettracker.com/ws}
      - REACT_APP_MAPBOX_TOKEN=${MAPBOX_ACCESS_TOKEN}
    networks:
      - fleet_network
    restart: unless-stopped

  # Nginx Reverse Proxy & Load Balancer
  nginx:
    image: nginx:alpine
    container_name: fleet_tracker_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - fleet_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: fleet_tracker_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - fleet_network
    restart: unless-stopped
    profiles: ["monitoring"]

  # Monitoring - Grafana  
  grafana:
    image: grafana/grafana:latest
    container_name: fleet_tracker_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - fleet_network
    restart: unless-stopped
    profiles: ["monitoring"]

# Networks
networks:
  fleet_network:
    driver: bridge

# Persistent Volumes
volumes:
  postgres_data:
  redis_data:
  mosquitto_data:
  nginx_logs:
  prometheus_data:
  grafana_data:
