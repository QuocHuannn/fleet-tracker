version: '3.8'

services:
  # Databases
  auth-db:
    image: postgres:15
    environment:
      POSTGRES_DB: auth_db
      POSTGRES_USER: auth_user
      POSTGRES_PASSWORD: auth_password
    ports:
      - "5432:5432"
    volumes:
      - auth_db_data:/var/lib/postgresql/data
      - ./infrastructure/databases/init/auth:/docker-entrypoint-initdb.d
    networks:
      - fleettracker

  vehicle-db:
    image: postgres:15
    environment:
      POSTGRES_DB: vehicle_db
      POSTGRES_USER: vehicle_user
      POSTGRES_PASSWORD: vehicle_password
    ports:
      - "5433:5432"
    volumes:
      - vehicle_db_data:/var/lib/postgresql/data
      - ./infrastructure/databases/init/vehicle:/docker-entrypoint-initdb.d
    networks:
      - fleettracker

  location-db:
    image: postgis/postgis:15-master
    environment:
      POSTGRES_DB: location_db
      POSTGRES_USER: location_user
      POSTGRES_PASSWORD: location_password
    ports:
      - "5434:5432"
    volumes:
      - location_db_data:/var/lib/postgresql/data
      - ./infrastructure/databases/init/location:/docker-entrypoint-initdb.d
    networks:
      - fleettracker

  notification-db:
    image: postgres:15
    environment:
      POSTGRES_DB: notification_db
      POSTGRES_USER: notification_user
      POSTGRES_PASSWORD: notification_password
    ports:
      - "5435:5432"
    volumes:
      - notification_db_data:/var/lib/postgresql/data
      - ./infrastructure/databases/init/notification:/docker-entrypoint-initdb.d
    networks:
      - fleettracker

  # Redis
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - fleettracker

  # MQTT Broker
  mosquitto:
    image: eclipse-mosquitto:2
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./infrastructure/mqtt-broker/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - ./infrastructure/mqtt-broker/passwd:/mosquitto/config/passwd
      - ./infrastructure/mqtt-broker/acl:/mosquitto/config/acl
      - mosquitto_data:/mosquitto/data
    networks:
      - fleettracker

  # Backend Services (Development mode)
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - AUTH_DB_URL=postgresql+psycopg2://auth_user:auth_password@auth-db:5432/auth_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=dev_jwt_secret_key
      - CORS_ORIGINS=http://localhost:3000,http://localhost:8000,http://127.0.0.1:3000
    volumes:
      - ./services/auth-service:/app
    depends_on:
      - auth-db
      - redis
    networks:
      - fleettracker

  vehicle-service:
    build:
      context: ./services/vehicle-service
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - DATABASE_URL=postgresql+asyncpg://vehicle_user:vehicle_password@vehicle-db:5432/vehicle_db
      - JWT_SECRET_KEY=dev_jwt_secret_key
      - CORS_ORIGINS=http://localhost:3000,http://localhost:8000,http://127.0.0.1:3000
    volumes:
      - ./services/vehicle-service:/app
    depends_on:
      - vehicle-db
    networks:
      - fleettracker

  location-service:
    build:
      context: ./services/location-service
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - DATABASE_URL=postgresql+asyncpg://location_user:location_password@location-db:5432/location_db
      - REDIS_URL=redis://redis:6379/2
      - MQTT_BROKER_URL=mqtt://mosquitto:1883
      - MQTT_USERNAME=mqtt_user
      - MQTT_PASSWORD=mqtt_password
      - CORS_ORIGINS=http://localhost:3000,http://localhost:8000,http://127.0.0.1:3000
    volumes:
      - ./services/location-service:/app
    depends_on:
      - location-db
      - mosquitto
      - redis
    networks:
      - fleettracker

  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    ports:
      - "8004:8004"
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - DATABASE_URL=postgresql+asyncpg://notification_user:notification_password@notification-db:5432/notification_db
      - REDIS_URL=redis://redis:6379/3
      - CORS_ORIGINS=http://localhost:3000,http://localhost:8000,http://127.0.0.1:3000
    volumes:
      - ./services/notification-service:/app
    depends_on:
      - notification-db
      - redis
    networks:
      - fleettracker

  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - AUTH_SERVICE_URL=http://auth-service:8001
      - VEHICLE_SERVICE_URL=http://vehicle-service:8002
      - LOCATION_SERVICE_URL=http://location-service:8003
      - NOTIFICATION_SERVICE_URL=http://notification-service:8004
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET_KEY=dev_jwt_secret_key
      - CORS_ORIGINS=http://localhost:3000,http://localhost:8000,http://127.0.0.1:3000
    volumes:
      - ./services/api-gateway:/app
    depends_on:
      - auth-service
      - vehicle-service
      - location-service
      - notification-service
      - redis
    networks:
      - fleettracker

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8004/ws
      - REACT_APP_MAPBOX_TOKEN=pk.eyJ1IjoiZXhhbXBsZSIsImEiOiJjbGV4YW1wbGUifQ.example
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - npm-cache:/tmp/.npm-cache
    depends_on:
      - api-gateway
    networks:
      - fleettracker
    stdin_open: true
    tty: true

  networks:
    fleettracker:
  
  volumes:
    npm-cache:
    driver: bridge

volumes:
  auth_db_data:
  vehicle_db_data:
  location_db_data:
  notification_db_data:
  redis_data:
  mosquitto_data:
