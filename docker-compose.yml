version: '3.8'

services:
  # API Gateway
  api-gateway:
    build: ./services/api-gateway
    ports:
      - "8000:8000"
    env_file: .env
    volumes:
      - ./services/api-gateway:/app
    depends_on:
      - auth-service
      - vehicle-service
      - location-service
      - notification-service

  # Auth Service
  auth-service:
    build: ./services/auth-service
    ports:
      - "8001:8001"
    env_file: .env
    volumes:
      - ./services/auth-service:/app
    depends_on:
      - auth-db
      - redis

  # Vehicle Service
  vehicle-service:
    build: ./services/vehicle-service
    ports:
      - "8002:8002"
    env_file: .env
    volumes:
      - ./services/vehicle-service:/app
    depends_on:
      - vehicle-db

  # Location Service
  location-service:
    build: ./services/location-service
    ports:
      - "8003:8003"
    env_file: .env
    volumes:
      - ./services/location-service:/app
    depends_on:
      - location-db
      - mosquitto
      - redis

  # Notification Service
  notification-service:
    build: ./services/notification-service
    ports:
      - "8004:8004"
    env_file: .env
    volumes:
      - ./services/notification-service:/app
    depends_on:
      - notification-db
      - redis

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    env_file: .env
    volumes:
      - ./frontend:/app
      - /app/node_modules

  # Databases
  auth-db:
    image: postgres:15
    environment:
      POSTGRES_DB: auth_db
      POSTGRES_USER: auth_user
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD:-auth_dev_pass_2024}
    volumes:
      - auth_db_data:/var/lib/postgresql/data
      - ./infrastructure/databases/init/auth:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"

  vehicle-db:
    image: postgres:15
    environment:
      POSTGRES_DB: vehicle_db
      POSTGRES_USER: vehicle_user
      POSTGRES_PASSWORD: ${VEHICLE_DB_PASSWORD:-vehicle_dev_pass_2024}
    volumes:
      - vehicle_db_data:/var/lib/postgresql/data
      - ./infrastructure/databases/init/vehicle:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"

  location-db:
    image: postgis/postgis:15-master
    environment:
      POSTGRES_DB: location_db
      POSTGRES_USER: location_user
      POSTGRES_PASSWORD: ${LOCATION_DB_PASSWORD:-location_dev_pass_2024}
    volumes:
      - location_db_data:/var/lib/postgresql/data
      - ./infrastructure/databases/init/location:/docker-entrypoint-initdb.d
    ports:
      - "5434:5432"

  notification-db:
    image: postgres:15
    environment:
      POSTGRES_DB: notification_db
      POSTGRES_USER: notification_user
      POSTGRES_PASSWORD: ${NOTIFICATION_DB_PASSWORD:-notification_dev_pass_2024}
    volumes:
      - notification_db_data:/var/lib/postgresql/data
      - ./infrastructure/databases/init/notification:/docker-entrypoint-initdb.d
    ports:
      - "5435:5432"

  # Shared Infrastructure
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

  mosquitto:
    image: eclipse-mosquitto:2
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./infrastructure/mqtt-broker/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - ./infrastructure/mqtt-broker/passwd:/mosquitto/config/passwd
      - ./infrastructure/mqtt-broker/acl:/mosquitto/config/acl
      - mosquitto_data:/mosquitto/data

  # Monitoring (optional)
  prometheus:
    image: prom/prometheus
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
    profiles:
      - monitoring

volumes:
  auth_db_data:
  vehicle_db_data:
  location_db_data:
  notification_db_data:
  redis_data:
  mosquitto_data:
  prometheus_data:
  grafana_data:
